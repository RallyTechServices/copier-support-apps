<!DOCTYPE html>
<html>
<head>
    <title>Field Analysis</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Feb 26 2016 15:25:55 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Feb 26 2016 15:25:55 GMT-0700 (MST)";
        var CHECKSUM = 4861837823;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('Rally.technicalservices.ModelFieldChecker',{
    constructor: function(config){
        this.model = config.model;
    },
    _getCustomFields: function(model){
        var custom_fields = _.filter(model.getFields(), function (field) {
            if (field && field.attributeDefinition) {
                return field.attributeDefinition.Custom && !field.hidden;
            }
        });
        return custom_fields;
    },
    _getDropdownFields: function(model){
        var whitelistFields = ['Project','Tags','Iteration','Release','Owner','Tester','SubmittedBy'];
        var dropdown_fields = _.filter(model.getFields(), function (field) {
            if (field && field.attributeDefinition) {
                if (!Ext.Array.contains(whitelistFields, field.name)){
                    return field.attributeDefinition.Constrained && !field.attributeDefinition.ReadOnly && !field.hidden && !field.attributeDefinition.Custom;
                }
            }
        });
        return dropdown_fields;
    },
    fetchData: function(){
        var deferred = Ext.create('Deft.Deferred');

        var custom = this._getCustomFields(this.model),
            dropdown = this._getDropdownFields(this.model),
            fields = custom.concat(dropdown);

        this._fetchWsapiRecords(this._getWsapiConfig(this.model, fields)).then({
            success: function(records){
                console.log('fetchData Success', records);
                var data = this._mungeModelRecords(records, custom, dropdown);
                deferred.resolve(data);
            },
            failure: function(msg){
                deferred.reject(msg);
            },
            scope: this
        });

        return deferred;
    },
    _mungeModelRecords: function(records, customFields, dropdownFields){
        var data = [],
            model = this.model ;

        _.each(customFields, function(c){
            var vals = this._getFieldValues(records, c.name, c.attributeDefinition.Constrained);
            data.push({model: c.modelType, field: c, fieldName: c.name, fieldDisplayName: c.displayName, fieldType: c.attributeDefinition.AttributeType,  totalCount: vals.count, uniqueValues: vals.values});
        }, this);

        _.each(dropdownFields, function(c){
            var vals = this._getFieldValues(records, c.name, c.attributeDefinition.Constrained);
            data.push({model: c.modelType, field: c, fieldName: c.name, fieldDisplayName: c.displayName, fieldType: c.attributeDefinition.AttributeType,  totalCount: vals.count, uniqueValues: vals.values});
        }, this);

        return data;

    },
    _getFieldValues: function(records, fieldName, constrained){
        var vals = {},
            count = 0;

        _.each(records, function(r){
            var val = r.get(fieldName);
            if (val && (Ext.isObject(val) || val.length > 0)){
                
                if (Ext.isObject(val)){
                    val = val._refObjectName || val._tagsNameArray;
                }

                if (!Ext.isArray(val)){
                    val = [val];
                }
                if (val.length > 0){
                    count++;
                    _.each(val, function(mv){
                        if (!vals[mv]){
                            vals[mv] = 0;
                        }
                        vals[mv]++;
                    });
                }
            }

        });

        var values = [];
        if (constrained){
            values = _.map(vals, function(count, key){ return key + '  (' + count + ')'; });
        }
        return { count: count, values: values};

    },
    _getWsapiConfig: function(model, fields){

        var fetch = _.map(fields, function(f){ return f.name; });

        return {
            model: model,
            fetch: fetch,
            limit: 'Infinity'
        };
    },
    _fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', config).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    _fetchAllowedValues: function(model, fieldName){
        var deferred = Ext.create('Deft.Deferred');

        model.getField(fieldName).getAllowedValueStore().load({
            callback: function(records, operation, success) {
                if (success){
                    var vals = _.map(records, function(r){ return r.get('StringValue'); });
                    deferred.resolve(vals);
                } else {
                    deferred.reject("_fetchAllowedValues ERROR");
                }
            },
            scope: this
        });
      return deferred;
    }

});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("FieldAnalysis", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "FieldAnalysis"
    },

    models: ['HierarchicalRequirement','Task','PortfolioItem','Defect','TestCase','TestCaseResult','DefectSuite','TestSet','Iteration','Release','Project'],

    launch: function() {
        this._fetchModels(this.models);
    },

    _fetchModels: function(models){
         Rally.data.ModelFactory.getModels({
            types: models,
            success: function(models){
                this.logger.log('_fetchModels', models);
                this._buildFieldStore(models);
            },
            failure: function(){
                this.logger.log('_fetchModels failure');
            },
            scope: this
        });
    },
    _buildFieldStore: function(models){
        this.logger.log('_buildFieldStore');

        var promises = [];

        _.each(models, function(model) {
            var fieldChecker = Ext.create('Rally.technicalservices.ModelFieldChecker',{
                model: model
            });

            promises.push(fieldChecker.fetchData());
        });

        Deft.Promise.all(promises).then({
            success: function(results){
                var data = _.flatten(results);
                this._displayGrid(data);
            },
            failure: function(msg){},
            scope: this
        });

    },

    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    _displayGrid: function(data){
        this.logger.log('data', data);
        var store = Ext.create('Rally.data.custom.Store',{
            data: data,
            fields: ['model','fieldName','fieldDisplayName','fieldType','totalCount', 'uniqueValues'],
            groupField: 'model',
            groupDir: 'ASC',
            getGroupString: function(record) {
                return (record.get('model'));
            }
        });

        //data.push({model: model.name, field: c, fieldName: c.name, fieldDisplayName: c.attributeDefinition.displayName, fieldType: c.attributeDefinition.AttributeType,  totalCount: vals.length, uniqueValues: _.uniq(vals)});
        var fieldNames =  ['model','fieldName','fieldDisplayName','fieldType','totalCount', 'uniqueValues'];

        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: this.getColumnCfgs(),
            features: [{
                ftype: 'groupingsummary',
                groupHeaderTpl: '{name} ({rows.length})'
            }]
        });
    },
    getColumnCfgs: function(){
        return [{
            text: 'Field Display Name ',
            dataIndex: 'fieldDisplayName',
            flex: 1,
        },{
            text: 'Name',
            dataIndex: 'fieldName',
            flex: 1,
        },{
            text: 'Type',
            dataIndex: 'fieldType'

        },{
            text: '# occurances',
            dataIndex: 'totalCount'
        },{
            text: 'Values',
            dataIndex: 'uniqueValues',
            flex: 1,
            renderer: function(v,m,r){
                return _.uniq(v).join('</br>');
            }
        }];
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('FieldAnalysis', {
                   name: 'Field Analysis'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>